pipeline {
  agent any

  options {
    timeout(time: 25, unit: 'MINUTES')  // Increased timeout
    preserveStashes(buildCount: 5)
    skipDefaultCheckout()
  }

  stages {
    stage('Clean & Checkout') {
      steps {
        cleanWs()
        git url: 'https://github.com/Sarman-Keshwani/Listygo-Prod.git', branch: 'main'
      }
    }

    stage('Build Frontend') {
      steps {
        // Create optimized vite config for production
        sh '''
          cat > vite.config.production.js << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react'

          export default defineConfig({
            plugins: [react()],
            build: {
              target: 'es2015',
              chunkSizeWarningLimit: 2000,
              sourcemap: false,
              minify: 'esbuild',
              // Split into smaller chunks to reduce memory usage
              rollupOptions: {
                output: {
                  manualChunks(id) {
                    if (id.includes('node_modules')) {
                      // Create separate chunks for large dependencies
                      if (id.includes('react')) return 'react-vendor';
                      if (id.includes('@ant-design')) return 'antd-vendor';
                      return 'vendor';
                    }
                  }
                }
              }
            }
          })
          EOF
        '''

        // Build with more memory and optimized config
        sh '''
          docker run --rm \
            --memory 12g \
            --memory-swap 16g \
            -e NODE_OPTIONS="--max-old-space-size=8192" \
            -v "$PWD":/app \
            -w /app \
            node:20-slim \
            sh -c "npm install --legacy-peer-deps && VITE_NETWORK_TIMEOUT=120000 npm run build -- --config vite.config.production.js"
        '''
        stash name: 'frontend-dist', includes: 'dist/**'
      }
    }

    stage('Build Static Image') {
      steps {
        unstash 'frontend-dist'
        sh '''
          # Create a minimal Dockerfile_serving static files
          cat > Dockerfile.static << 'EOF'
          FROM nginx:stable-alpine
          COPY dist/ /usr/share/nginx/html
          COPY nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          HEALTHCHECK --interval=30s --timeout=3s \\
            CMD wget -q -O /dev/null http://localhost/ || exit 1
          EOF

          docker build -f Dockerfile.static -t home-frontend-static .
        '''
      }
    }

    stage('Deploy') {
      steps {
        sh '''
          docker rm -f home-frontend-1 || true
          docker run -d \
            --name home-frontend-1 \
            -p 5173:80 \
            home-frontend-static
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Frontend built & deployed in <2min!'
    }
    failure {
      echo '❌ Frontend build or deploy failed—check logs above.'
    }
  }
}
