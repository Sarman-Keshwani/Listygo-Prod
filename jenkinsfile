pipeline {
  agent any

  options {
    timeout(time: 25, unit: 'MINUTES')
    preserveStashes(buildCount: 5)
    skipDefaultCheckout()
  }

  stages {
    stage('Clean & Checkout') {
      steps {
        cleanWs()
        git url: 'https://github.com/Sarman-Keshwani/Listygo-Prod.git', branch: 'main'
      }
    }

    stage('Build Frontend') {
      steps {
        // Create an extremely memory-optimized Vite config
        sh '''
          cat > vite.config.production.js << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    // Target modern browsers only to reduce polyfill size
    target: 'esnext',
    // Less warnings in console
    chunkSizeWarningLimit: 3000,
    // Disable sourcemaps to save memory
    sourcemap: false,
    // Use fastest minifier
    minify: 'esbuild',
    // Don't inline assets
    assetsInlineLimit: 0,
    // Split into many smaller chunks to reduce memory pressure
    rollupOptions: {
      output: {
        // Maximize code splitting
        manualChunks: (id) => {
          if (id.includes('node_modules')) {
            if (id.includes('react-dom')) return 'react-dom';
            if (id.includes('react')) return 'react-core';
            if (id.includes('@ant-design/icons')) return 'antd-icons';
            if (id.includes('@ant-design')) return 'antd-core';
            if (id.includes('framer-motion')) return 'framer-motion';
            if (id.includes('lucide')) return 'lucide';
            if (id.includes('axios')) return 'axios';
            if (id.includes('dayjs')) return 'dayjs';
            // Return filename-based chunks for other node_modules
            const fileName = id.split('/').pop().split('.')[0];
            return `vendor-${fileName}`;
          }
        },
        // Ensure assets are in separate directory
        assetFileNames: 'assets/[name]-[hash].[ext]',
      }
    },
  }
})
EOF

          # Try a build with minimal dependencies first to reduce memory usage
          docker run --rm \
            -v "$(pwd):/app" \
            -w "/app" \
            --memory=16g \
            --memory-swap=20g \
            node:20-slim \
            sh -c "export NODE_OPTIONS='--max-old-space-size=12288' && npm install --no-save --omit=dev @vitejs/plugin-react react react-dom && npm run build -- --config vite.config.production.js || (echo 'Minimal build failed, trying full build' && npm install --legacy-peer-deps && npm run build -- --config vite.config.production.js)"
        '''
        stash name: 'frontend-dist', includes: 'dist/**'
      }
    }

    stage('Build Static Image') {
      steps {
        unstash 'frontend-dist'
        sh 'docker build -t home-frontend .'
      }
    }

    stage('Deploy') {
      steps {
        sh '''
          docker stop home-frontend-container || true
          docker rm home-frontend-container || true
          docker run -d --name home-frontend-container -p 5173:80 home-frontend
        '''
      }
    }
  }

  post {
    success {
      echo '✅ Frontend built & deployed successfully!'
    }
    failure {
      echo '❌ Frontend build or deploy failed—check logs above.'
    }
  }
}
